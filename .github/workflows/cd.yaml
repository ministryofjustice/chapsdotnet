name: Dev - Continuous Deployment

on:
  workflow_dispatch:
  push:
    branches:
      - 'main'

env:
  KUBE_NAMESPACE: ${{ secrets.KUBE_NAMESPACE_DEV }}

jobs:
  main:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Build
        run: docker build . -f ChapsDotNET/Dockerfile -t chapsdotnetimage
      - name: Push to ECR
        id: ecr
        uses: jwalton/gh-ecr-push@v1
        with:
          access-key-id: ${{ secrets.ECR_AWS_ACCESS_KEY_ID_DEV }}
          secret-access-key: ${{ secrets.ECR_AWS_SECRET_ACCESS_KEY_DEV }}
          region: eu-west-2
          local-image: chapsdotnetimage
          image: ${{ secrets.ECR_NAME_DEV }}:${{ github.sha }}  
  deploy-dev:
    runs-on: ubuntu-latest
    needs: main
    env:
      KUBE_NAMESPACE: ${{ secrets.KUBE_NAMESPACE_DEV }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Update image tag
        env:
            ECR_URL: ${{ secrets.ECR_URL_DEV }}
        run: export IMAGE_TAG=${{ github.sha }} && cat kubectl_deploy/deployment.tpl | envsubst > kubectl_deploy/deployment.yaml          
      - name: Authenticate to the cluster
        env:
            KUBE_CLUSTER: ${{ secrets.KUBE_CLUSTER_DEV }}
        run: |
            echo "${{ secrets.KUBE_CERT_DEV }}" > ca.crt
            kubectl config set-cluster ${KUBE_CLUSTER} --certificate-authority=./ca.crt --server=https://${KUBE_CLUSTER}
            kubectl config set-credentials deploy-user --token=${{ secrets.KUBE_TOKEN_DEV }}
            kubectl config set-context ${KUBE_CLUSTER} --cluster=${KUBE_CLUSTER} --user=deploy-user --namespace=${{ secrets.KUBE_NAMESPACE_DEV}}
            kubectl config use-context ${KUBE_CLUSTER}            
      - name: Apply the updated manifest
        run: |
            kubectl -n ${KUBE_NAMESPACE} apply -f kubectl_deploy 
            
  deploy-staging:
    runs-on: ubuntu-latest
    needs: deploy-dev
    environment: staging
    env:
      KUBE_NAMESPACE: ${{ secrets.KUBE_NAMESPACE_STAGING }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Update image tag
        env:
            ECR_URL: ${{ secrets.ECR_URL_DEV }}
        run: export IMAGE_TAG=${{ github.sha }} && cat kubectl_staging/deployment.tpl | envsubst > kubectl_staging/deployment.yaml          
      - name: Authenticate to the cluster
        env:
            KUBE_CLUSTER: ${{ secrets.KUBE_CLUSTER_STAGING }}
        run: |
            echo "${{ secrets.KUBE_CERT_STAGING }}" > ca.crt
            kubectl config set-cluster ${KUBE_CLUSTER} --certificate-authority=./ca.crt --server=https://${KUBE_CLUSTER}
            kubectl config set-credentials deploy-user --token=${{ secrets.KUBE_TOKEN_STAGING }}
            kubectl config set-context ${KUBE_CLUSTER} --cluster=${KUBE_CLUSTER} --user=deploy-user --namespace=${{ secrets.KUBE_NAMESPACE_STAGING }}
            kubectl config use-context ${KUBE_CLUSTER}            
      - name: Apply the updated manifest
        run: |
            kubectl -n ${KUBE_NAMESPACE} apply -f kubectl_staging

  deploy-staging:
    runs-on: ubuntu-latest
    needs: deploy-staging
    environment: production
    env:
      KUBE_NAMESPACE: ${{ secrets.KUBE_NAMESPACE_PRODUCTION }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Update image tag
        env:
            ECR_URL: ${{ secrets.ECR_URL_DEV }}
        run: export IMAGE_TAG=${{ github.sha }} && cat kubectl_production/deployment.tpl | envsubst > kubectl_production/deployment.yaml          
      - name: Authenticate to the cluster
        env:
            KUBE_CLUSTER: ${{ secrets.KUBE_CLUSTER_PRODUCTION }}
        run: |
            echo "${{ secrets.KUBE_CERT_PRODUCTION }}" > ca.crt
            kubectl config set-cluster ${KUBE_CLUSTER} --certificate-authority=./ca.crt --server=https://${KUBE_CLUSTER}
            kubectl config set-credentials deploy-user --token=${{ secrets.KUBE_TOKEN_PRODUCTION }}
            kubectl config set-context ${KUBE_CLUSTER} --cluster=${KUBE_CLUSTER} --user=deploy-user --namespace=${{ secrets.KUBE_NAMESPACE_PRODUCTION }}
            kubectl config use-context ${KUBE_CLUSTER}            
      - name: Apply the updated manifest
        run: |
            kubectl -n ${KUBE_NAMESPACE} apply -f kubectl_production