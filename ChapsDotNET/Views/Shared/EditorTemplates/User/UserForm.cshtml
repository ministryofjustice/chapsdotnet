@model UserViewModel

@using Microsoft.AspNetCore.Http.Extensions;
@using ChapsDotNET.Business.Interfaces
@using ChapsDotNET.Frontend.Components.Button;

@{
    var primaryButtonModel = new ButtonModel { Label = "Create", Element = ButtonModel.ValidElementTypes.input, Type = ButtonModel.ValidButtonStyles.primary, InputType = ButtonModel.ValidButtonTypes.submit };
    var secondaryButtonModel = new ButtonModel { Label = "Cancel", Element = ButtonModel.ValidElementTypes.anchor, Type = ButtonModel.ValidButtonStyles.secondary, Url = Url.Action("Index", "Users", new { area = "Admin" }) };

    var legendIsPageTitle = (bool?)ViewData["LegendIsPageTitle"];
}

@using (Html.BeginForm())
{
    <div class="chaps-form">
    <fieldset class="govuk-fieldset">
        <legend class="govuk-fieldset__legend govuk-fieldset__legend--l">
            @if (legendIsPageTitle == true)
            {
                    <h1 class="govuk-fieldset__heading">@ViewData["Legend"]</h1>
            } 
            else
            {
                    <h2 class="govuk-fieldset__heading">@ViewData["Legend"]</h2>
            }
        </legend>
        <!-- Name -->
        <div class="govuk-form-group">
                <div class="chaps-form__label-wrapper">
                @Html.LabelFor(m => m.Name, "Name", new { @for = "user-name", @class = "govuk-label" })
            </div>
            <div id="user-name-hint'" class="govuk-hint">
                Name must be 50 characters or less
            </div>
            <p id="user-name-error-wrapper" class="govuk-error-message">
                @Html.ValidationMessageFor(m => m.Name)
            </p>
            @Html.TextBoxFor(m => m.Name, new { @id = "user-name", @name = "user-name", @class = "govuk-input govuk-!-width-one-third", @aria_describedby = "user-name-hint user-name-error-wrapper" })
        </div>
        <!-- Display name-->
        <div class="govuk-form-group">
                <div class="chaps-form__label-wrapper">
                @Html.LabelFor(m => m.DisplayName, "Display name", new { @for = "user-display-name", @class = "govuk-label" })
            </div>
            <div id="user-display-name-hint" class="govuk-hint">
                Display name must be 50 characters or less
            </div>
                <p id="user-display-name-error-wrapper" class="govuk-error-message">
                <span class="govuk-visually-hidden chaps-form__pre-error chaps-form__pre-error--hidden">Error:</span>
                @Html.ValidationMessageFor(model => model.DisplayName)
            </p>
            @Html.TextBoxFor(m => m.DisplayName, new
                {
                     @id = "user-display-name",
                     @name = "user-display-name",
                     @class = "govuk-input govuk-!-width-one-third",
                     @aria_describedby = "user-display-name-hint user-display-name-error-wrapper" 
                }
            )
        </div>
        <!-- Email -->
        <div class="govuk-form-group">
            <div class="chaps-form__label-wrapper">
                @Html.LabelFor(m => m.Email, "Email", new { @for = "user-email", @class = "govuk-label" })
                    <span class="govuk-label govuk-label--optional">&nbsp;(Optional)</span>
            </div>
                <p id="user-email-error-wrapper" class="govuk-error-message">
                    @Html.ValidationMessageFor(model => model.Email)
            </p>         
            @Html.TextBoxFor(m => m.Email, new
                {
                    @id = "user-email",
                    @name = "user-email",
                    @class = "govuk-input govuk-!-width-one-third",
                    @aria_describedby = "user-email-error-wrapper"
                }
            )
        </div>
        <!-- Role -->
        <div class="govuk-form-group">
                <div class="chaps-form__label-wrapper">
            @Html.LabelFor(m => m.RoleStrength, "Role", new { @for = "user-role", @class = "govuk-label" })  
            </div>
                <p id="user-role-error-wrapper" class="govuk-error-message">
                @Html.ValidationMessageFor(model => model.RoleStrength)
            </p>
            @Html.DropDownListFor(m => m.RoleStrength, Model.RoleList, "Please select an office", new { @id = "user-role", @class = "govuk-select", @aria_describedby = "user-role-error-wrapper" })
        </div>
        <!-- Team -->
        <div class="govuk-form-group">
            <div class="chaps-form__label-wrapper">
            @Html.LabelFor(m => m.TeamId, "Team", new { @for = "user-team", @class = "govuk-label" })
                </div>
                <p id="user-team-error-wrapper" class="govuk-error-message">
                @Html.ValidationMessageFor(model => model.TeamId)
            </p>
            @Html.DropDownListFor(m => m.TeamId, Model.TeamList, "Please select an office", new { @id = "user-team", @class = "govuk-select", @aria_describedby = "user-team-error-wrapper" })
        </div>
    </fieldset>
    <div class="govuk-button-group">
        <partial name="Button" model="@primaryButtonModel" />
        <partial name="Button" model="@secondaryButtonModel" />
    </div>
    </div>
}
